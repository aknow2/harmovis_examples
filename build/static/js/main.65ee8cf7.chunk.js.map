{"version":3,"sources":["actions/actions.ts","constants/actionTypes.ts","container/HeatmapRaidusRange.tsx","reducer/heatmapSettings.ts","layers/HeatmapLayer.ts","container/ToggleHeatMap.tsx","container/Toggle3DHeatmap.tsx","container/HeatmapSelection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["actionCreator","actionCreatorFactory","setHeatmapRadius","toggleHeatmap","selectHeatmapType","extrudeHeatmap","HeatmapRadiusRange","props","state","useSelector","st","heatmapSettings","dispatcher","useDispatch","min","max","gridSize","type","value","onChange","ev","actions","parseInt","currentTarget","defaultProps","HeatmapType","initialState","selectedType","Hexagon","enabledHeatmap","particleCount","extruded","PolygonIconLayer","this","movedData","size","visible","HexagonLayer","opacity","elevationScale","data","radius","getPosition","d","longitude","latitude","GridLayer","cellSize","CompositeLayer","layerName","ToggleHeatMap","prop","checked","HeatmapTypeSelection","Grid","MAPBOX_TOKEN","process","createMovesBaseList","count","Array","from","length","departuretime","arrivaltime","operation","_","i","position","Math","floor","random","elapsedtime","App","console","log","setMovesBase","setViewport","viewport","width","window","screen","height","setSecPerHour","settime","timeBegin","timeLength","clickedObject","depotsData","secperhour","animatePause","animateReverse","routePaths","lightSettings","movesbase","undefined","className","addMinutes","Toggle3DHeatmap","HeatmapRaidusRange","mapboxApiAccessToken","layers","MovesLayer","optionVisible","HeatmapLayer","Container","connectToHarmowareVis","Boolean","location","hostname","match","saga","createSagaMiddleware","store","createStore","getCombinedReducer","action","isType","payload","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65ee8cf7.chunk.js","sourcesContent":["import actionCreatorFactory from 'typescript-fsa';\nimport * as types from '../constants/actionTypes';\nimport { HeatmapType } from '../reducer/heatmapSettings';\n\nconst actionCreator = actionCreatorFactory();\n\nexport const setHeatmapRadius = actionCreator<number>(types.SET_HEATMAP_SIZE);\nexport const setParticleCount = actionCreator<number>(types.SET_PARTICLE_COUNT);\nexport const toggleHeatmap = actionCreator<boolean>(types.TOGGLE_HEATMAP);\nexport const selectHeatmapType = actionCreator<HeatmapType>(types.CHANGE_HEATMAP_TYPE);\nexport const extrudeHeatmap = actionCreator<boolean>(types.EXTRUDE_HEATMAP);\n","export const SET_HEATMAP_SIZE='SET_HEATMAP_SIZE';\nexport const SET_PARTICLE_COUNT='SET_PARTICLE_COUNT';\nexport const TOGGLE_HEATMAP='TOGGLE_HEATMAP';\nexport const CHANGE_HEATMAP_TYPE='CHANGE_HEATMAP_TYPE'; \nexport const EXTRUDE_HEATMAP='EXTRUDE_HEATMAP'","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeatmapState } from '../reducer/heatmapSettings';\nimport * as actions from '../actions/actions';\n\n\ninterface HeatmapRadiusRangeProps {\n  min?: number;\n  max?: number;\n}\n\nconst HeatmapRadiusRange: React.FC<HeatmapRadiusRangeProps> = (props: HeatmapRadiusRangeProps)  => {\n  const state = useSelector<any, HeatmapState>(st => {\n    return st.heatmapSettings;\n  })\n  const dispatcher = useDispatch();\n  const onChangeHandler = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    dispatcher(actions.setHeatmapRadius(parseInt(ev.currentTarget.value)));\n  }\n  const { min, max} = props;\n  return (<div>\n    {state.gridSize}\n    <input \n      type=\"range\"\n      value={state.gridSize}\n      onChange={onChangeHandler}\n      min={min}\n      max={max}\n    />\n  </div>);\n};\n\nHeatmapRadiusRange.defaultProps ={\n  min: 100,\n  max: 5000\n}\n\nexport default HeatmapRadiusRange;","import {isType} from 'typescript-fsa';\nimport { Action } from 'redux';\nimport * as actions from '../actions/actions';\n\nexport enum HeatmapType {\n  Hexagon=\"Hexagon\",\n  Grid=\"Grid\",\n}\n\nexport interface HeatmapState{\n  selectedType: HeatmapType\n  particleCount: number;\n  gridSize: number;\n  enabledHeatmap: boolean;\n  extruded: boolean;\n}\n\nconst initialState: HeatmapState  = {\n  selectedType: HeatmapType.Hexagon,\n  enabledHeatmap: true,\n  gridSize: 400,\n  particleCount: 3000,\n  extruded: true\n};\n\nexport default (state = initialState, action: Action): HeatmapState => {\n  if(isType(action, actions.setHeatmapRadius)) {\n    return {\n      ...state,\n      gridSize: action.payload\n    }\n  }\n  if (isType(action, actions.setHeatmapRadius)) {\n    return {\n      ...state,\n      particleCount: action.payload\n    };\n  }\n  if (isType(action, actions.toggleHeatmap)) {\n    return {\n      ...state,\n      enabledHeatmap: action.payload,\n    }\n  }\n  if (isType(action, actions.selectHeatmapType)) {\n    return {\n      ...state,\n      selectedType: action.payload,\n    }\n  }\n  if (isType(action, actions.extrudeHeatmap)) {\n    return {\n      ...state,\n      extruded: action.payload,\n    }\n  }\n  return state;\n};","import { LayerProps, CompositeLayer, HexagonLayer, GridLayer } from 'deck.gl';\nimport { MovedData } from 'harmoware-vis';\nimport { HeatmapType } from '../reducer/heatmapSettings';\n\n\ninterface HeatmapLayerProps extends LayerProps {\n  type:HeatmapType \n  movedData: MovedData[];\n  size: number;\n  extruded: boolean;\n}\n\nexport default class PolygonIconLayer extends CompositeLayer<HeatmapLayerProps> {\n\n  static layerName = 'HeatmapLayer';\n\n  renderLayers() {\n    const {movedData, type, size, visible, extruded} = this.props\n    if (type === HeatmapType.Hexagon) {\n      return [\n          new HexagonLayer({\n            visible, \n            extruded,\n            opacity: 0.1,\n            elevationScale: 10,\n            data: movedData,\n            radius: size,\n            getPosition: (d: MovedData) => [d.longitude as number, d.latitude as number],\n          })\n        ];\n    } else {\n      return [\n          new GridLayer({\n            visible,\n            extruded,\n            opacity: 0.1,\n            elevationScale: 10,\n            cellSize: size,\n            data: movedData,\n            getPosition: (d: MovedData) => [d.longitude as number, d.latitude as number],\n          })\n        ];\n    }\n  }\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeatmapState } from '../reducer/heatmapSettings';\nimport * as actions from '../actions/actions';\n\nconst ToggleHeatMap: React.FC<any> = prop  => {\n  const state = useSelector<any, HeatmapState>(st => {\n    return st.heatmapSettings;\n  })\n  const dispatcher = useDispatch();\n  const onChangeHandler = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    dispatcher(actions.toggleHeatmap(ev.currentTarget.checked));\n  }\n  return (<div>\n    <input \n      type=\"checkbox\"\n      checked={state.enabledHeatmap}\n      onChange={onChangeHandler}\n    />\n    {state.enabledHeatmap ? '  ENABLED':'  DISABLED' }\n  </div>);\n};\n\n\nexport default ToggleHeatMap;\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeatmapState } from '../reducer/heatmapSettings';\nimport * as actions from '../actions/actions';\n\nconst ToggleHeatMap: React.FC<any> = prop  => {\n  const state = useSelector<any, HeatmapState>(st => {\n    return st.heatmapSettings;\n  })\n  const dispatcher = useDispatch();\n  const onChangeHandler = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    dispatcher(actions.extrudeHeatmap(ev.currentTarget.checked));\n  }\n  return (<div>\n    <input \n      type=\"checkbox\"\n      checked={state.extruded}\n      onChange={onChangeHandler}\n    />\n    {state.extruded ? '  ENABLED':'  DISABLED' }\n  </div>);\n};\n\n\nexport default ToggleHeatMap;\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeatmapState, HeatmapType } from '../reducer/heatmapSettings';\nimport * as actions from '../actions/actions';\n\nconst HeatmapTypeSelection: React.FC = (props: any)  => {\n  const state = useSelector<any, HeatmapState>(st => {\n    return st.heatmapSettings;\n  })\n  const dispatcher = useDispatch();\n  const onChangeHandler = (ev: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatcher(actions.selectHeatmapType(ev.currentTarget.value as HeatmapType));\n  }\n  return (\n    <select value={state.selectedType} onChange={onChangeHandler}>\n      <option value={HeatmapType.Hexagon}>Hexagon</option>\n      <option value={HeatmapType.Grid}>Grid</option>\n    </select>\n  );\n};\n\nexport default HeatmapTypeSelection;\n","import React from 'react';\nimport { FpsDisplay,HarmoVisLayers, Container, BasedProps, BasedState, connectToHarmowareVis, MovesLayer, PlayButton, PauseButton, ForwardButton, ReverseButton, AddMinutesButton, ElapsedTimeRange, SpeedRange, Movesbase, MovesbaseOperation } from 'harmoware-vis';\nimport HeatmapRaidusRange from './container/HeatmapRaidusRange';\nimport HeatmapLayer from './layers/HeatmapLayer';\nimport { HeatmapState } from './reducer/heatmapSettings';\nimport './App.scss';\nimport ToggleHeatMap from './container/ToggleHeatMap';\nimport Toggle3DHeatmap from './container/Toggle3DHeatmap';\nimport HeatmapTypeSelection from './container/HeatmapSelection';\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\nconst createMovesBase = (): Movesbase => {\n  const interval = 1000;\n  const repeat = 20;\n  const departuretime = 1551575400;\n  const arrivaltime = departuretime + interval * repeat;\n\n  const operation = Array.from({length: repeat}, (_, i): MovesbaseOperation => {\n    const lon = 136.7 + (Math.floor(Math.random() * 299999) /1000000);\n    const lat = 35.1 + (Math.floor(Math.random() * 199999) / 1000000);\n    return {\n      position: [lon, lat, 0],\n      elapsedtime: departuretime + (i*interval)\n    } as MovesbaseOperation;\n  });\n  return {\n    departuretime,\n    arrivaltime,\n    operation\n  };\n}\n\nconst createMovesBaseList = (count: number): Movesbase[] => {\n  return Array.from({length: count}, (): Movesbase => createMovesBase())\n}\n\n\nclass App extends Container<BasedProps & HeatmapState, BasedState> {\n\n  componentDidMount() {\n    console.log(process.env);\n    const { actions, particleCount } = this.props;\n    if(actions) {\n      actions.setMovesBase(createMovesBaseList(particleCount));\n      actions.setViewport({\n        ...this.props.viewport,\n        width: window.screen.width,\n        height: window.screen.height,\n      })\n      actions.setSecPerHour(100);\n    }\n  }\n\n  render() {\n    const { settime, timeBegin, timeLength, actions, clickedObject, depotsData,\n      secperhour, animatePause, animateReverse, viewport, routePaths,\n      lightSettings, movesbase, movedData, gridSize, enabledHeatmap, selectedType, extruded } = this.props;\n    const optionVisible = false;\n    if (actions === undefined\n      || settime === undefined || lightSettings === undefined\n      || timeLength === undefined || timeBegin === undefined\n      || secperhour === undefined || !viewport\n      || !routePaths || !movesbase\n      || !movedData || clickedObject === undefined\n      || !depotsData) {\n      return <div/>\n    }\n    return (\n      <div>\n        <div className=\"harmovis_controller\">\n          <ul >\n            <li>{animatePause ?\n                <PlayButton actions={actions} /> :\n                <PauseButton actions={actions} />}\n                {animateReverse ?\n                <ForwardButton actions={actions} /> :\n                <ReverseButton actions={actions} />}\n            </li>\n            <li>\n            <AddMinutesButton addMinutes={-5} actions={actions} />\n            <AddMinutesButton addMinutes={5} actions={actions} />\n            </li>\n              <li>\n                elapsed time: \n              <ElapsedTimeRange settime={settime} timeLength={timeLength}\n                  timeBegin={timeBegin} actions={actions} />\n              </li>\n              <li>\n                speed: \n              <SpeedRange secperhour={secperhour} actions={actions} />\n              </li>\n              </ul>\n            <figure>\n              <figcaption>Heatmap settings</figcaption>\n              <ol>\n              <li>\n                enable heatmap: <ToggleHeatMap />\n              </li>\n              <li>\n                3D: <Toggle3DHeatmap />\n              </li>\n              <li>\n                grid size(m): <HeatmapRaidusRange />\n              </li>\n              <li>\n                type: <HeatmapTypeSelection />\n              </li>\n              </ol>\n            </figure>\n\n        </div>\n        <div className=\"harmovis_area\">\n          <HarmoVisLayers\n            viewport={viewport} actions={actions}\n            mapboxApiAccessToken={MAPBOX_TOKEN ? MAPBOX_TOKEN : ''}\n            layers={[\n              new MovesLayer({ routePaths, movesbase, movedData,\n                       clickedObject, actions, lightSettings, optionVisible }),\n              new HeatmapLayer({\n                visible: enabledHeatmap,\n                type: selectedType,\n                extruded,\n                movedData,\n                size: gridSize\n              }),\n            ]}\n          />\n        </div>\n        <FpsDisplay />\n      </div>\n    );\n  }\n}\n\nexport default connectToHarmowareVis(App, undefined);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/src/css/mapbox-gl.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { getCombinedReducer } from 'harmoware-vis';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport heatmapSettings from './reducer/heatmapSettings';\nimport createSagaMiddleware from 'redux-saga';\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  getCombinedReducer({\n    heatmapSettings\n  }),\n  applyMiddleware(saga)\n);\n\nReactDOM.render(\n  <Provider store={store as any}>\n  <App />\n  </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}